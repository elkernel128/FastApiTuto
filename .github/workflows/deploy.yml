name: Deploy to AWS with Terraform

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: chatbot-api
  ECS_SERVICE: chatbot-service
  ECS_CLUSTER: chatbot-cluster
  CONTAINER_NAME: chatbot-container
  TF_WORKSPACE: production

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Build Docker image
        run: docker build -t chatbot-api:${{ github.sha }} .

      # Initialize and apply backend infrastructure first
      - name: Initialize Backend Infrastructure
        working-directory: ./terraform/backend
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan
        env:
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_key: ${{ secrets.SUPABASE_KEY }}

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
        env:
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_key: ${{ secrets.SUPABASE_KEY }}

      - name: Setup Terraform Variables
        run: |
          cd terraform
          cp example.tfvars terraform.tfvars
          # Update terraform.tfvars with actual VPC and subnet IDs
          sed -i "s/chatbot-vpc/${aws_vpc.main.id}/g" terraform.tfvars
          sed -i "s/chatbot-public-1/${aws_subnet.public[0].id}/g" terraform.tfvars
          sed -i "s/chatbot-public-2/${aws_subnet.public[1].id}/g" terraform.tfvars
