name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main
      - staging

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: chatbot-api
  ECS_SERVICE: chatbot-service
  ECS_CLUSTER: chatbot-cluster
  CONTAINER_NAME: chatbot-container
  # Set workspace based on branch
  TF_WORKSPACE: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    # Job-level environment variables
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Build Docker image
        run: docker build -t chatbot-api:${{ github.sha }} .

      - name: Create Backend Infrastructure
        working-directory: ./terraform/backend
        run: |
          terraform init
          # Check if S3 bucket exists
          if aws s3 ls "s3://chatbot-terraform-state-bucket" 2>&1 | grep -q 'NoSuchBucket'; then
            echo "Creating backend infrastructure..."
            terraform apply -auto-approve
          else
            echo "Backend infrastructure already exists, skipping creation..."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Wait for S3 bucket
        run: sleep 30 # Give AWS some time to properly create the S3 bucket

      - name: Terraform Init and Workspace
        working-directory: ./terraform
        run: |
          # Remove any existing local state
          rm -rf .terraform
          rm -f .terraform.lock.hcl

          # Initialize Terraform with backend configuration
          terraform init \
            -backend=true \
            -backend-config="bucket=chatbot-terraform-state-bucket" \
            -backend-config="key=${TF_WORKSPACE}/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="encrypt=true" \
            -input=false

          # Create new workspace non-interactively (if it doesn't exist)
          terraform workspace new ${TF_WORKSPACE} || true

          # Select the workspace
          terraform workspace select ${TF_WORKSPACE}
        env:
          TF_IN_AUTOMATION: "true"
          TF_INPUT: "0"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var-file="${TF_WORKSPACE}.tfvars"
        env:
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_key: ${{ secrets.SUPABASE_KEY }}

      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
        run: terraform apply -auto-approve -var-file="${TF_WORKSPACE}.tfvars"
        env:
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_key: ${{ secrets.SUPABASE_KEY }}

      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate
